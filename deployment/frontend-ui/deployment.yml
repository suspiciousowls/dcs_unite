kind: Deployment
apiVersion: apps/v1
metadata:
  name: dcs-front-ui
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dcs-front-ui
  template:
    metadata:
      labels:
        app: dcs-front-ui
    spec:
      containers:
        - name: dcs-front-ui
          image: snaiperlfc/dcs-front-ui:1.0.37
          imagePullPolicy: Always
          ports:
            - containerPort: 80
      restartPolicy: Always
---
kind: Service
apiVersion: v1
metadata:
  name: dcs-front-ui
spec:
  ports:
    - protocol: TCP
      port: 18080
      targetPort: 80
  type: ClusterIP
  #  type: NodePort
  #  ports:
  #    - port: 80
  #      targetPort: 80
  #      protocol: TCP
  #      nodePort: 31000
  selector:
    app: dcs-front-ui
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    # auth-url can be set to `http://$host/oauth2/auth` or the following (more efficient?)
    nginx.ingress.kubernetes.io/auth-url: "http://auth.127.0.0.1.nip.io/oauth2/auth"
    # auth-signin can be set to `http://$host/oauth2/start?rd=$escaped_request_uri` if sharing same domain as auth service
    nginx.ingress.kubernetes.io/auth-signin: "http://auth.127.0.0.1.nip.io/oauth2/start?rd=$pass_access_scheme://$http_host$escaped_request_uri"
    # Specify headers to pass to backend once authentication request completes.
    nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email, x-auth-request-preferred-username, authorization"
    # Fix for 'upstream sent too big header while reading response header from upstream'
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
  name: dcs-front-ui-ingress
spec:
  ingressClassName: nginx
  rules:
    - host: dcs.127.0.0.1.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dcs-front-ui
                port:
                  number: 18080
